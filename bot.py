import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
ADMIN_ID = 6184367469
WHITELIST = {6184367469, 6432605813}
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"
COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é, –º–∞–ª–µ–Ω—å–∫–∞—è –º–æ—è üíñ",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üéÅ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —Å–æ–∫—Ä–æ–≤–∏—â–µ üíé",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å—á–∞—Å—Ç—å—è –∏ –º–∏—Ä–∞ üïä",
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in WHITELIST:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞."
        )
        return

    keyboard = [
        [
            InlineKeyboardButton("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", callback_data="sad"),
            InlineKeyboardButton("–ú–Ω–µ —Ö–æ—Ä–æ—à–æ", callback_data="happy"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id not in WHITELIST:
        await query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞."
        )
        return

    data = query.data
    if data == "sad":
        compliment = random.choice(COMPLIMENTS)
        await query.edit_message_text(compliment)
    elif data == "happy":
        await query.edit_message_text("üòÑ –†–∞–¥ –∑–∞ —Ç–µ–±—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
    else:
        await query.edit_message_text("üôÇ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

async def main():
    app = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL webhook'–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä https://yourdomain.com/path
    PORT = int(os.getenv("PORT", "8443"))

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        webhook_path="/path",  # —É–∫–∞–∂–∏ –ø—É—Ç—å webhook (–±–µ–∑ –¥–æ–º–µ–Ω–∞)
    )

if name == "__main__":
    import asyncio

    asyncio.run(main())




import os
import random
import logging
from datetime import datetime
import asyncio

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, CallbackQueryHandler, filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
ADMIN_ID = 6184367469
WHITELIST = {6184367469, 6432605813}
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_keyboard = ReplyKeyboardMarkup(
    [["–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ ‚è≥", "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ üò¢"], ["–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ†"]],
    resize_keyboard=True
)

admin_inline_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º", callback_data="broadcast")],
])

COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é, –º–∞–ª–µ–Ω—å–∫–∞—è –º–æ—è üíñ",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üéÅ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —Å–æ–∫—Ä–æ–≤–∏—â–µ üíé",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å—á–∞—Å—Ç—å—è –∏ –º–∏—Ä–∞ üïä",
]

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in WHITELIST:
        msg = (
            f"‚õîÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user.first_name} (@{user.username}) [ID: {user.id}]\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update.message else 'no message'}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
        if update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context):
        return
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=main_keyboard
    )

async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context):
        return
    start_date = datetime(2024, 10, 10, 9, 0, 0)
    now = datetime.now()
    diff = now - start_date
    days = diff.days
    hours, rem = divmod(diff.seconds, 3600)
    minutes, seconds = divmod(rem, 60)
    text = f"‚è≥ –° 10 –æ–∫—Ç—è–±—Ä—è 2024 –ø—Ä–æ—à–ª–æ:\n{days} –¥–Ω–µ–π, {hours} —á, {minutes} –º–∏–Ω, {seconds} —Å–µ–∫."
    await update.message.reply_text(text)

async def handle_sad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context):
        return
    compliment = random.choice(COMPLIMENTS)
    await update.message.reply_text(compliment)
    user = update.effective_user
    user_info = f"@{user.username}" if user.username else user.first_name
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} (ID: {user.id}) –Ω–∞–∂–∞–ª ¬´–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ¬ª."
    )

async def handle_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_inline_keyboard
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "broadcast":
        context.user_data["awaiting_broadcast"] = True
        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await check_access(update, context):
        return
    if context.user_data.get("awaiting_broadcast") and user_id == ADMIN_ID:
        text = update.message.text
        for uid in WHITELIST:
            try:
                await context.bot.send_message(chat_id=uid, text=f"üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{text}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
        context.user_data["awaiting_broadcast"] = False
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await update.message.reply_text("üôÇ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

async def daily_message(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    start_date = datetime(2024, 10, 10, 9, 0, 0)
    diff = now - start_date
    days = diff.days
    hours, rem = divmod(diff.seconds, 3600)
    minutes, seconds = divmod(rem, 60)
    text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–° 10 –æ–∫—Ç—è–±—Ä—è 2024 –ø—Ä–æ—à–ª–æ: {days} –¥–Ω–µ–π, {hours} —á, {minutes} –º–∏–Ω, {seconds} —Å–µ–∫."
    for uid in WHITELIST:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    scheduler = AsyncIOScheduler(timezone="Asia/Almaty")
    scheduler.add_job(daily_message, CronTrigger(hour=9, minute=0), args=[app.bot])
    scheduler.start()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ"), handle_time))
    app.add_handler(MessageHandler(filters.Regex("–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"), handle_sad))
    app.add_handler(MessageHandler(filters.Regex("–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), handle_admin))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    logger.info("–ó–∞–ø—É—Å–∫ webhook...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ asyncio.run()
    loop = asyncio.get_event_loop()
    loop.create_task(app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        allowed_updates=["message", "callback_query"]
    ))
    loop.run_forever()

if __name__ == "__main__":
    main()
