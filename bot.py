import logging
import asyncio
from datetime import datetime, timedelta, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
import os

TOKEN = os.environ["BOT_TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
ALLOWED_USERS = list(map(int, os.environ.get("ALLOWED_USERS", "").split(",")))
START_DATE = datetime(2024, 10, 10)

COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é, –º–∞–ª–µ–Ω—å–∫–∞—è –º–æ—è üíñ",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üéÅ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —Å–æ–∫—Ä–æ–≤–∏—â–µ üíé",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å—á–∞—Å—Ç—å—è –∏ –º–∏—Ä–∞ üïä",
]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ù–µ–¥–æ–ø—É—â–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({update.effective_user.full_name})")
        return
    keyboard = [[InlineKeyboardButton("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", callback_data="sad")]]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "sad":
        from random import choice
        await query.edit_message_text(choice(COMPLIMENTS))

    elif query.data == "admin" and user_id == ADMIN_ID:
        keyboard = [[InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="broadcast")]]
        await query.edit_message_text("–û–ø—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "broadcast" and user_id == ADMIN_ID:
        context.user_data["awaiting_broadcast"] = True
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        return
    if context.user_data.get("awaiting_broadcast") and user_id == ADMIN_ID:
        context.user_data["awaiting_broadcast"] = False
        for uid in ALLOWED_USERS:
            try:
                await context.bot.send_message(chat_id=uid, text=update.message.text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.utcnow()
    passed = now - START_DATE
    text = f"–ü—Ä–æ—à–ª–æ {passed.days} –¥–Ω–µ–π —Å 10 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞."
    for uid in ALLOWED_USERS:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    job_queue = app.job_queue
    job_queue.run_daily(send_daily_message, time=time(hour=3, minute=0))  # 3:00 UTC = 9:00 –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=os.environ["WEBHOOK_URL"]
    )

if __name__ == "__main__":
    asyncio.run(main())
