import asyncio
import logging
import os
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "10000"))

WHITE_LIST = {ADMIN_ID}
START_DATE = datetime(2024, 10, 10)

# –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"
COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é, –º–∞–ª–µ–Ω—å–∫–∞—è –º–æ—è üíñ",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üéÅ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —Å–æ–∫—Ä–æ–≤–∏—â–µ üíé",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å—á–∞—Å—Ç—å—è –∏ –º–∏—Ä–∞ üïä",
]

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", callback_data="sad")],
        [InlineKeyboardButton("–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin")] if ADMIN_ID in WHITE_LIST else []
    ])

def get_admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="broadcast")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in WHITE_LIST:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in WHITE_LIST:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return

    if query.data == "sad":
        from random import choice
        await query.edit_message_text(text=choice(COMPLIMENTS), reply_markup=get_main_keyboard())

    elif query.data == "admin" and user_id == ADMIN_ID:
        await query.edit_message_text("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

    elif query.data == "broadcast" and user_id == ADMIN_ID:
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        context.user_data["awaiting_broadcast"] = True

    elif query.data == "back":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in WHITE_LIST:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return

    if context.user_data.get("awaiting_broadcast") and user_id == ADMIN_ID:
        msg = update.message.text
        for uid in WHITE_LIST:
            try:
                await context.bot.send_message(chat_id=uid, text=msg)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")
        context.user_data["awaiting_broadcast"] = False
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("üôÇ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=get_main_keyboard())

async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    days_passed = (datetime.utcnow() + timedelta(hours=6) - START_DATE).days
    text = f"üìÖ –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ {days_passed} –¥–Ω–µ–π —Å 10 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞."
    for uid in WHITE_LIST:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ 9:00 –ø–æ –ö–∞—Ä–∞–≥–∞–Ω–¥–µ (UTC+6)
    job_queue = app.job_queue
    job_queue.run_daily(send_daily_message, time=datetime.time(hour=3, minute=0))  # 3:00 UTC = 9:00 UTC+6

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
