import asyncio
import logging
import os
import random
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEBHOOK_URL = "https://telegram-bot-anxietyxrl.onrender.com"
PORT = int(os.getenv("PORT", "10000"))

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
WHITELIST = {ADMIN_ID, 123456789}  # ‚Üê –¥–æ–±–∞–≤—å –Ω—É–∂–Ω—ã–µ user_id

# –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"
COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é, –º–∞–ª–µ–Ω—å–∫–∞—è –º–æ—è üíñ",
    "–¢—ã ‚Äî –ø–æ–¥–∞—Ä–æ–∫ –≤ —ç—Ç–æ–º –º–∏—Ä–µ üéÅ",
    "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ ‚Äî —Å–æ–∫—Ä–æ–≤–∏—â–µ üíé",
    "–¢—ã –¥–æ—Å—Ç–æ–π–Ω–∞ —Å—á–∞—Å—Ç—å—è –∏ –º–∏—Ä–∞ üïä",
]

# –í—Ä–µ–º—è –æ—Ç—Å—á—ë—Ç–∞
START_DATE = datetime(2024, 10, 10, tzinfo=timezone(timedelta(hours=6)))

logging.basicConfig(level=logging.INFO)


def is_whitelisted(user_id: int) -> bool:
    return user_id in WHITELIST


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_whitelisted(user_id):
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return
    keyboard = [
        [InlineKeyboardButton("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", callback_data="sad")],
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_menu")])
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if not is_whitelisted(user_id):
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚õî –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user_id}")
        return

    if query.data == "sad":
        compliment = random.choice(COMPLIMENTS)
        await query.message.reply_text(compliment)

    elif query.data == "admin_menu" and user_id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", callback_data="broadcast")],
        ]
        await query.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "broadcast" and user_id == ADMIN_ID:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        context.user_data["awaiting_broadcast"] = True


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_whitelisted(user_id):
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

    if context.user_data.get("awaiting_broadcast") and user_id == ADMIN_ID:
        text = update.message.text
        context.user_data["awaiting_broadcast"] = False
        for uid in WHITELIST:
            try:
                await context.bot.send_message(chat_id=uid, text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{text}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("üôÇ –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")


async def send_daily_message(app):
    while True:
        now = datetime.now(timezone(timedelta(hours=6)))
        next_9am = now.replace(hour=9, minute=0, second=0, microsecond=0)
        if now >= next_9am:
            next_9am += timedelta(days=1)
        wait_seconds = (next_9am - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        delta = datetime.now(timezone(timedelta(hours=6))) - START_DATE
        message = f"‚è∞ –ü—Ä–æ—à–ª–æ –¥–Ω–µ–π —Å 10 –æ–∫—Ç—è–±—Ä—è 2024: {delta.days}"
        for uid in WHITELIST:
            try:
                await app.bot.send_message(chat_id=uid, text=message)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(send_daily_message(app))

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        path="/"
    )


if __name__ == "__main__":
    asyncio.run(main())
