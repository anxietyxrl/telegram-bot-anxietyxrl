import os
import random
import logging
from datetime import datetime, time
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ADMIN_ID = 6184367469
WHITELIST = {6184367469, 6432605813}
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –õ–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–Ω–æ–ø–∫–∏
main_keyboard = ReplyKeyboardMarkup(
    [
        ["–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ ‚è≥"],
        ["–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ üò¢"],
        ["–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ†"] if ADMIN_ID else []
    ],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    [
        ["–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º üì¢"],
        ["–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"]
    ],
    resize_keyboard=True
)

COMPLIMENTS = [
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
    "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
    "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
    "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
    "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
    "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
    "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
    "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
    "–¢—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è üíï",
    "–¢—ã —Å–ø–æ—Å–æ–±–Ω–∞ –Ω–∞ –≤—Å—ë, —Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–µ—Ç—å üí•",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ ‚Äî –∫–∞–∫ —Å–≤–µ—Ç –≤ —Ç–µ–º–Ω–æ—Ç–µ üå†",
    "–¢—ã —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ–± —ç—Ç–æ–º üå∑",
]

# Conversation states
AWAITING_BROADCAST = range(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
async def check_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = update.effective_user
    if user.id not in WHITELIST:
        msg = (
            f"‚õîÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user.first_name} (@{user.username}) [ID: {user.id}]\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.")
        return False
    return True

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context): return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –∏–ª–∏ –µ—Å–ª–∏ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ üíå",
        reply_markup=main_keyboard
    )

# –¢–∞–π–º–µ—Ä
async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context): return
    start_date = datetime(2024, 10, 10, 9, 0, 0)
    now = datetime.now()
    diff = now - start_date
    days = diff.days
    hours, remainder = divmod(diff.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    text = f"‚è≥ –° 10 –æ–∫—Ç—è–±—Ä—è 2024 –ø—Ä–æ—à–ª–æ:\n{days} –¥–Ω–µ–π, {hours} —á, {minutes} –º–∏–Ω, {seconds} —Å–µ–∫."
    await update.message.reply_text(text)

# –ì—Ä—É—Å—Ç—å
async def handle_sad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, context): return
    compliment = random.choice(COMPLIMENTS)
    await update.message.reply_text(compliment)
    user = update.effective_user
    user_info = f"@{user.username}" if user.username else user.first_name
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"üò¢ {user_info} –Ω–∞–∂–∞–ª ¬´–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ¬ª.")

# –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.")
        return
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è
async def request_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardRemove())
    return AWAITING_BROADCAST

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    success = 0
    for uid in WHITELIST:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
            success += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {e}")
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=main_keyboard)
    return ConversationHandler.END

# –ù–∞–∑–∞–¥
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    return ConversationHandler.END

# fallback
async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {update.message.text}")
    await check_access(update, context)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
async def daily_notify(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    start_date = datetime(2024, 10, 10, 9, 0, 0)
    diff = now - start_date
    days = diff.days
    hours, remainder = divmod(diff.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    text = f"‚è∞ –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ:\n{days} –¥–Ω–µ–π, {hours} —á, {minutes} –º–∏–Ω, {seconds} —Å–µ–∫."
    for uid in WHITELIST:
        try:
            await context.bot.send_message(chat_id=uid, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ"), handle_time))
    app.add_handler(MessageHandler(filters.Regex("–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"), handle_sad))
    app.add_handler(MessageHandler(filters.Regex("–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), admin_menu))
    app.add_handler(MessageHandler(filters.Regex("–ù–∞–∑–∞–¥"), go_back))

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º"), request_broadcast)],
        states={AWAITING_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_broadcast)]},
        fallbacks=[MessageHandler(filters.Regex("–ù–∞–∑–∞–¥"), go_back)],
    )
    app.add_handler(conv_handler)

    app.add_handler(MessageHandler(filters.TEXT, fallback))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        daily_notify,
        trigger='cron',
        hour=9,
        minute=0,
        timezone='Asia/Almaty',
        args=[app.bot],
    )
    scheduler.start()

    logger.info("‚úÖ –ó–∞–ø—É—Å–∫ run_webhook()")
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        allowed_updates=Update.ALL_TYPES,
    )
    
# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ"), handle_time))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("–º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ"), handle_sad))
    app.add_handler(MessageHandler(filters.TEXT, fallback))

    logger.info("‚úÖ –ó–∞–ø—É—Å–∫ run_webhook()")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
        allowed_updates=Update.ALL_TYPES
    )
