import os
from random import choice
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from datetime import datetime, timedelta
import asyncio
import pytz

karaganda_tz = pytz.timezone("Asia/Almaty")
start_date = datetime(2024, 10, 10, tzinfo=karaganda_tz)
user_ids = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_ids.add(update.effective_user.id)
    keyboard = [
        [InlineKeyboardButton("üìÜ –°–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ?", callback_data="skolko")],
        [InlineKeyboardButton("üò¢ –ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", callback_data="sad")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ —Å 10.10.2024.\n"
        "–ú–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚ù§Ô∏è",
        reply_markup=reply_markup
    )

async def skolko(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_time_difference())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "skolko":
        await query.edit_message_text(get_time_difference())
    elif query.data == "sad":
        compliments = [
            "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ—Ç –º–∏—Ä —Å–≤–µ—Ç–ª–µ–µ üåü",
            "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ —Ä–∞—Å—Ç–æ–ø–∏—Ç—å –ª—ë–¥ ‚ùÑÔ∏èüòä",
            "–¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–º–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è üí™",
            "–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ üíñ",
            "–¢—ã –∫—Ä–∞—Å–∏–≤–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ, –Ω–æ –∏ –¥—É—à–æ–π ‚ú®",
            "–° —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞ —Ç–µ–ø–ª–æ, –¥–∞–∂–µ –≤ —Å–∞–º—É—é —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É ‚òÄÔ∏è",
            "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—à—å üòç",
            "–¢—ã ‚Äî –∫–∞–∫ –ª—É—á —Å–æ–ª–Ω—Ü–∞ –≤ –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å üåà",
            "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è ‚Äî –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞ üî•",
            "–¢—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è. –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π üåπ",
            "–Ø —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å –ª—é–±–ª—é –º–æ—è –∂ —Ç—ã –º–∞–ª–µ–Ω—å–∫–∞—èüíñ",
        ]
        await query.edit_message_text(choice(compliments))

def get_time_difference():
    now = datetime.now(karaganda_tz)
    delta = now - start_date
    days = delta.days
    hours = delta.seconds // 3600
    minutes = (delta.seconds % 3600) // 60
    seconds = delta.seconds % 60
    return (
        f"–° 10 –æ–∫—Ç—è–±—Ä—è 2024 –≥–æ–¥–∞ –ø—Ä–æ—à–ª–æ:\n"
        f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥."
    )

async def daily_message_task(app):
    while True:
        now = datetime.now(karaganda_tz)
        target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
        if now >= target_time:
            target_time += timedelta(days=1)
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        for user_id in user_ids:
            try:
                await app.bot.send_message(chat_id=user_id, text=get_time_difference())
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

if name == "__main__":
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("skolko", skolko))
    app.add_handler(CallbackQueryHandler(handle_button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async def on_startup(app):
        asyncio.create_task(daily_message_task(app))

    app.post_init = on_startup
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
